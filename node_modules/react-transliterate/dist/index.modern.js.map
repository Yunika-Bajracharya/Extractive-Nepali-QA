{"mappings":"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","sources":["src/index.tsx","src/util/index.ts","src/util/touch-util.ts","src/util/caret-util.ts","src/styles.module.css","src/constants/TriggerKeys.ts","src/util/suggestions-util.ts"],"sourcesContent":["import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport classes from \"./styles.module.css\";\nimport { ReactTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\n\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\nconst KEY_ESCAPE = \"Escape\";\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const ReactTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  ...rest\n}: ReactTransliterateProps): JSX.Element => {\n  const [options, setOptions] = useState<string[]>([]);\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number) => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        matchStart + options[index].length + 1,\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, {\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data);\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n      renderSuggestions(currentWord);\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.key)) {\n        event.preventDefault();\n        handleSelection(selection);\n      } else {\n        switch (event.key) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n          }}\n          className={classes.ReactTransliterate}\n          data-testid=\"rt-suggestions-list\"\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              className={index === selection ? classes.Active : undefined}\n              style={index === selection ? activeItemStyles || {} : {}}\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { ReactTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\n","import { isTouchEnabled } from \"./touch-util\";\nimport { getInputSelection, setCaretPosition } from \"./caret-util\";\n\nexport { isTouchEnabled, getInputSelection, setCaretPosition };\n","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n",null,"export const TriggerKeys = {\n  KEY_RETURN: \"Enter\",\n  KEY_ENTER: \"Enter\",\n  KEY_TAB: \"Tab\",\n  KEY_SPACE: \" \",\n};\n","import { Language } from \"../types/Language\";\n\ntype Config = {\n  numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  config?: Config,\n): Promise<string[]> => {\n  const { numOptions, showCurrentWordAsLastSuggestion, lang } = config || {\n    numOptions: 5,\n    showCurrentWordAsLastSuggestion: true,\n    lang: \"hi\",\n  };\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n\n  const url = `https://inputtools.google.com/request?text=${word}&itc=${lang}-t-i0-und&num=${numOptions}&cp=0&cs=1&ie=utf-8&oe=utf-8&app=demopage`;\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    if (data && data[0] === \"SUCCESS\") {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data[1][0][1], word]\n        : data[1][0][1];\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        return [word];\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};\n"],"names":[],"version":3,"file":"index.modern.js.map","sourceRoot":"../"}